#include <msp430.h>
void ilet(int, int); 
void ilet0(void);
void ilet1(void);
void oku(void);
void baslangic_konfigurasyonu(void);
void timer_baslat(void);
int kenarsay=0;
int sure;
void bitir(void);
void PWM_uret(void);
int veri=0;
int sayac=0;
void baslat(void);
int alinan_sinyal;
int main(void)
{
WDTCTL = WDTPW | WDTHOLD; 
baslangic_konfigurasyonu();

__bis_SR_register(LPM1_bits + GIE); //kesme olusursa uyanmak kosuluyla uyku moduna girildi
}


void baslangic_konfigurasyonu(void)
{
BCSCTL1 = CALBC1_1MHZ; 
DCOCTL = CALDCO_1MHZ;  //clock frekansi 1Mhz olarak ayarlandi

     
P1IE = BIT7 | BIT3 | BIT5 | BIT4;      
P1IES= BIT7 | BIT3 | BIT5 | BIT4;   //butonlar için düsen kenar kesmesi ayarlandi
P1DIR = BIT0 | BIT1 | BIT2 | BIT6; ; //ledler cikis olarak ayarlandi
P1OUT=0x00; 
P1IFG = 0x00; 

P2DIR |= BIT2; //ir verici 
P2SEL |= BIT2;  //ir verici timer kullanarak pwm uretecegi icin bu konfigurasyon yapildi

TACCR0 = 10200; //eger hatali bir sinyal alinirsa kaç mikrosaniye sonra kesme üretilecegini ayarlayan deger
CCTL0 = CCIE; // timer kesmeleri etkinlestirildi

P2IE = BIT1;         //ir alici
P2IES= BIT1;    // ir alici için dusen kenar kesmesi ayarlandi    
//P2IFG &= ~BIT1; 

__enable_interrupt(); 
}

//////////////////////////////////////////////VERICI///////////////////////////////////////////

#pragma vector=PORT1_VECTOR
__interrupt void Port_1(void)
{ 

if((P1IN & BIT3)!=BIT3) 
  {
    __delay_cycles(10000);
    
    if((P1IN & BIT3)!=BIT3){     //10 ms sonra tekrar butona basilip basilmadigini kontrol et

    baslat();  //baslangic sinyalini ilet
    ilet(0,4);   //4 bitlik bit dizinini ilet
    bitir();    //bitirme sinyalini ilet
    }}

if((P1IN & BIT4)!=BIT4) 
  { 
    __delay_cycles(10000);
    
    if((P1IN & BIT4)!=BIT4) { 
    
    baslat();
    ilet(6,4);
    bitir();
    }}

if((P1IN & BIT5)!=BIT5) 
  { 
    __delay_cycles(10000);
    if((P1IN & BIT5)!=BIT5) {
    
    baslat();
    ilet(9,4);
    bitir();
    }}

if((P1IN & BIT7)!=BIT7) 
  { 
    __delay_cycles(10000);
    if((P1IN & BIT7)!=BIT7) {
    
    baslat();
    ilet(15,4);
    bitir();
  }
  }

   P1IFG = 0x00; //kesme bayragini temizle
}


void PWM_uret(void)   // yaklasik 38 khz frekansa sahip pwm sinyalinin üretilmesi
{

TA1CCR0 = 26-1;    //periyot 26 us                      
TA1CCR1 = 10;         //duty cycle                  
TA1CCTL1 |= OUTMOD_6;     //Outmod 6 seçildiggi icin verici 11 mikrosaniye boyunca lojik 1, 15 mikrosaniye boyunca lojik 0 durumunda            
TA1CTL = TASSEL_2 + MC_1+ ID_0 ;  //kaynak olarak SMCLK sec , up mode'da sayma islemi yap
}


                     
void ilet0(void)          //500 us pwm sinyalini üret ve timeri durdurup bekle
{             

  PWM_uret(); //38 khz pwm sinyali üret 
  __delay_cycles(500);
  TA1CTL=0;          //  500 mikrosaniye sonra timeri durdur 
  __delay_cycles(1500); //1500 mikrosaniye boyunca bekle
}

void ilet1(void)
{ 
 
  PWM_uret();  //38 khz pwm sinyali üret 
   __delay_cycles(500);    
   TA1CTL=0;  //500 mikrosaniye sonra timeri durdur 
  __delay_cycles(500);  //sinyalin 0 bitinden farkli olabilmesi için 500 mikrosaniye boyunca bekle
}

void bitir(void)   // alicida son düsen kenarin olusmasi için 1 milisaniyelik bitirme sinyali üret
{    
   PWM_uret(); 
   __delay_cycles(1000);
    TA1CTL=0;  // timer durdur
}

void baslat(void)    //aliciya baslangic sinyalinin gonderilmesi
{ 

  PWM_uret();     //aliciyla  saglikli bir iletisim kurulabilmesi için 6 ms boyunca sinyal gönder
   __delay_cycles(6000);
   TA1CTL=0; //timer durdur
  __delay_cycles(3000);   // sonrasinda 3 ms bekle
}

void ilet(int sinyal, int bitsayisi)   //bitleri sirayla ilet
{ 

int maske= 1<<(bitsayisi-1) ;  //bitlerin sirayla iletilmesi amaciyla maske olustur
for(int i=0; i<bitsayisi; i++)  
{
if((sinyal & maske) == 0) 
{
ilet0();
}
else 
{
ilet1();
}
 maske >>=1  ;  //ilk olarak en degerli bit, son olarak en dusuk degerli bit iletildigi için maskeyi saga dogru kaydir
}
}


////////////////////////ALICI///////////////////////


#pragma vector=PORT2_VECTOR
__interrupt void Port_2(void)
{   
     kenarsay++; 
     
     if (kenarsay==1) {timer_baslat(); }  //ilk dusen kenar gelirse timer baaslat ve kesmeden çik
     
     else if(kenarsay==2){sure=TAR;  if(sure>8800 && sure<10200) {  timer_baslat();  }   //baslangic sinyali geldiyse sirada gelecek bitin anlasilmasi için timeri baslat
                                     else  {  kenarsay=0;  }}  //eger istenmeyen bir sinyal gelirse en basa don
     
     else if(kenarsay==3){sure=TAR;           //gelen sinyalin 0 biti mi, 1 biti mi yoksa istenmeyen bir sinyal mi olduguna karar ver
     if(sure>700&& sure<1300){ veri = (veri << 1) | 1; }  
     else if (sure>1700 && sure<2300) {veri = (veri << 1) | 0;}  
     else {kenarsay=0;}    timer_baslat();}   //istenmeyen sinyal alindiysa en basa don
    

     else if(kenarsay==4){sure=TAR;      //gelen sinyalin 0 biti mi, 1 biti mi yoksa istenmeyen bir sinyal mi olduguna karar ver
     if(sure>700&& sure<1300){ veri = (veri << 1) | 1; } 
     else if (sure>1700 && sure<2300) {veri = (veri << 1) | 0;}
     else {kenarsay=0;}     timer_baslat();} //istenmeyen sinyal alindiysa en basa don
    
     else if(kenarsay==5){  sure=TAR;   //gelen sinyalin 0 biti mi, 1 biti mi yoksa istenmeyen bir sinyal mi olduguna karar ver
     if(sure>700&& sure<1300){ veri = (veri << 1) | 1; } 
     else if (sure>1700 && sure<2300) {veri = (veri << 1) | 0;}  
     else {kenarsay=0;}     timer_baslat();} //istenmeyen sinyal alindiysa en basa don
     
                                                                             
    else if(kenarsay==6){  sure=TAR; //gelen sinyalin 0 biti mi, 1 biti mi yoksa istenmeyen bir sinyal mi olduguna karar ver
    kenarsay=0;   //siradaki sinyal icin dusen kenari sifirla
    if(sure>700&& sure<1300){ veri = (veri << 1) | 1; } 
    else if (sure>1700&& sure<2300) {veri = (veri << 1) | 0;} 
    else {kenarsay=0;}   
    alinan_sinyal=veri; veri=0; oku();    //sinyal cozumlemesi icin oku fonksiyonunu cagir
     }
  P2IFG &= ~BIT1;   //kesmeden çik
}

void timer_baslat(void)  
{ 
TACTL = TACLR + TASSEL_2 + MC_2;  //TAR degerini sifirla, SMCLK seçip saymaya basla, 
}



void oku(void)
{       //gelen sinyalin çözümlenip uygun ledin yakilmasi
switch(alinan_sinyal)
{

case 15:
P1OUT ^= BIT6;
alinan_sinyal=0;

break;

case 9:
P1OUT ^= BIT2;
alinan_sinyal=0;

break;



case 6:
P1OUT ^= BIT1;
alinan_sinyal=0;

break;


case 0:
P1OUT ^= BIT0;
alinan_sinyal=0;

break;

}       
} 



#pragma vector=TIMER0_A0_VECTOR 
__interrupt void Timer_A (void)
{      //eger hatali sinyal alinirsa 10200 mikrosaniye sonra aliciyi sifirla
kenarsay=0; 
veri=0;
}
